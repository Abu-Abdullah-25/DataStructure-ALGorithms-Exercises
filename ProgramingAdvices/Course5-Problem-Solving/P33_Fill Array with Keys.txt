#include<iostream>
#include<string>
#include <cmath>
#include <iomanip>
#include <cstdlib>
using namespace std;

enum enCharType {
    SmallLetter = 1,
    CapitalLetter = 2,
    SpecialCharacter = 3,
    Digit = 4
};

int RandomNumber(int From, int To) {
    // Function to generate a random number
    int randNum = rand() % (To - From + 1) + From;
    return randNum;
}

char GetRandomCharacter(enCharType CharType) {
    switch (CharType) {
        case enCharType::SmallLetter:
            return char(RandomNumber(97, 122));
        case enCharType::CapitalLetter:
            return char(RandomNumber(65, 90));
        case enCharType::SpecialCharacter:
            return char(RandomNumber(33, 47));
        case enCharType::Digit:
            return char(RandomNumber(48, 57));
        default:
            return ' '; // Default case to handle unexpected enum values
    }
}

void PrintStringArray(string arr[], int arrLength) {
    cout << "\nArray elements:\n\n";
    for (int i = 0; i < arrLength; i++) {
        cout << "Array[" << i << "] : " << arr[i] << "\n";
    }
    cout << "\n";
}

string GenerateWord(enCharType CharType, int Length) {
    string Word;
    for (int i = 0; i < Length; i++) {
        Word += GetRandomCharacter(CharType);
    }
    return Word;
}

string GenerateKey() {
    string Key = "";
    Key += GenerateWord(enCharType::CapitalLetter, 4) + "-";
    Key += GenerateWord(enCharType::CapitalLetter, 4) + "-";
    Key += GenerateWord(enCharType::CapitalLetter, 4) + "-";
    Key += GenerateWord(enCharType::CapitalLetter, 4);
    return Key;
}

void FillArrayWithKeys(string arr[100], int arrLength) {
    for (int i = 0; i < arrLength; i++)
        arr[i] = GenerateKey();
}

int ReadPositiveNumber(string Message) {
    int Number = 0;
    do {
        cout << Message << endl;
        cin >> Number;
    } while (Number <= 0);
    return Number;
}

int main() {
    // Seeds the random number generator in C++, called only once
    srand(static_cast<unsigned>(time(NULL)));

    string arr[100];
    int arrLength = 0;
    arrLength = ReadPositiveNumber("How many keys do you want to generate? ");
    FillArrayWithKeys(arr, arrLength);
    PrintStringArray(arr, arrLength);

    return 0;
}